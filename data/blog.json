{ "blogposts":[
	{
		"title":"How to Host Multiple Domains on a Single Apache Server",
		"author":"Ken Klatt",
		"date":"February 27, 2015",
		"postbody": "<p>You've set up your Apache webserver to host yourolddomain.com but now you want to host a new domain on the same server. Setting up multiple domains or subdomains on your webserver instance is easy. The process consists of two steps: (1) <em>define your new domain on the webserver and configure how the server should handle requests to it</em>, and (2) <em>tell the Internet that your new domain is hosted on your server</em></p><h4>Configure a Virtual Host on Your Server</h4><p>Your add-on domain or subdomain is called a virtual host and your first step is to define a virtual host in the Apache configuration file, <em>apache2/conf/httpd.conf</em>.  Open this file in a text editor, scroll down to the part of the file that refers to Virtual Hosts and add the following line of code: </p><code>NameVirtualHost *:80</code><p>Then add the following bit of code for each add-on domain or subdomain you wish to host on your server: </p><code>&ltVirtualHost *:80&gt</br>ServerName yournewdomain.com</br>ServerAdmin your@emailaddress.com</br>DocumentRoot htdocs(or ${DOCUMENT_ROOT} folder)/yournewdomain</br>&ltDirectory htdocs/yournewdomain&gt</br>Options Indexes FollowSymLinks MultiViews</br>AllowOverride All</br>Order allow,deny</br>&lt/Directory&gt</br>ErrorLog ${APACHE_LOG_DIR}/yournewdomain.com.error.log</br>LogLevel warn</br>CustomLog ${APACHE_LOG_DIR}/yournewdomain.com.access.log combined</br>&lt/VirtualHost&gt</code><p>Then restart the apache service on your server. Depending on your setup, the command to do this might be something like this </p><code>sudo service apache2 restart</code></p><h4>Add DNS Entries for Your New Domain</h4><p>Add a zone to your DNS configuration for your new domain.  To this zone you will add an A record that points to the public IP address of your webserver.  Once the DNS fully propogates, any requests for yournewdomain.com will point to the folder you indicated in the httpd.conf file on your webserver.</p>"
	},
	{
		"title":"Set Container Height for Script-loaded Content",
		"author":"Ken Klatt",
		"date":"February 25, 2015",
		"postbody": "<p>You've set up an AJAX query that loads external content into a &ltdiv&gt in your HTML page, but the height of the &ltdiv&gt is set before the script that loads the content.  This results in your content displaying on top of the content in subsequent containers on your page.  In order to fix this problem, you need to set the CSS height property in the function that outputs the external content.</p><p>First, in your HTML page, create a new parent &ltdiv&gt that contains the &ltdiv&gt that the external data is loaded into</p><code>&ltdiv id='limit'&gt</br>&nbsp;&nbsp;&ltdiv id='external-data'&gt &lt/div&gt</br>&lt/div&gt</code><p>Then add a line at the end of your jQuery function that sets the height of the &ltdiv&gt that holds the external data</p><code>$('#limit').css({height:$('#external-data').height()});</code>"
	},
	{
		"title":"Control Your Media Queries and Breakpoints with Sass",
		"author":"Ken Klatt",
		"date":"February 22, 2015",
		"postbody": "<p>Sass is great for keeping your CSS under control and making it really easy to make modifications efficiently.  Media queries work well for setting up breakpoints for applying styles to your application for various screen sizes.  With Sass you can make the process of using and maintaining your breakpoints even easier.</p><p>One way to do this is to set up a custom mixin that defines all your breakpoints with if statements.  I like to put all my custom mixins in their own sass file called _mixins.sass and then add an @import 'mixins' statement to the sass file that assigns styles. </p><code>=breakpoint($bp)</br>&nbsp;&nbsp;@if $bp == widest</br>&nbsp;&nbsp;&nbsp;&nbsp;@media (min-width: 1601px)</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@content</br>&nbsp;&nbsp;@if $bp == wider</br>&nbsp;&nbsp;&nbsp;&nbsp;@media (max-width: 1600px)</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@content</br>&nbsp;&nbsp;@if $bp == medium</br>&nbsp;&nbsp;&nbsp;&nbsp;@media (max-width: 1109px)</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@content</br>&nbsp;&nbsp;@if $bp == smaller</br>&nbsp;&nbsp;&nbsp;&nbsp;@media (max-width: 767px)</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@content</br>&nbsp;&nbsp;@if $bp == smallest</br>&nbsp;&nbsp;&nbsp;&nbsp;@media (max-width: 500px)</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@content</code><p>In this example, I use a widest to smallest naming convention, but you can use whatever you like.  Once you create your mixin, you can use it when you define your styles like so:</p><code>.main-content</br>&nbsp;&nbsp;width: 70%</br>&nbsp;&nbsp;+breakpoint(smallest)</br>&nbsp;&nbsp;&nbsp;&nbsp;width: 100%</code></pre><p>Using this method, I can apply the styles for each breakpoint in the same place making life much easier when I, or team members, need to modify something later.</p>"
	}
]
}